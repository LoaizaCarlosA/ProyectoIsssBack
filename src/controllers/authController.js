const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const db = require('../config/db');
const nodemailer = require('nodemailer');

// **Registro de usuario (Administradores)**
exports.register = async (req, res) => {
    const { nombre, apellido_paterno, apellido_materno, correo, contrasena, rol } = req.body;
    console.log('‚û°Ô∏è Registrando usuario:', correo);

    try {
        const hashedPassword = await bcrypt.hash(contrasena, 10);
        db.query('INSERT INTO usuarios_admin (nombre, apellido_paterno, apellido_materno, correo, contrasena, rol) VALUES (?, ?, ?, ?, ?, ?)',
            [nombre, apellido_paterno, apellido_materno, correo, hashedPassword, rol],
            (err) => {
                if (err) {
                    console.error('‚ùå Error en el registro:', err);
                    return res.status(500).json({ error: 'Error al registrar el usuario' });
                }
                res.status(201).json({ message: 'Usuario registrado correctamente' });
            });
    } catch (err) {
        console.error('‚ùå Error al encriptar la contrase√±a:', err);
        res.status(500).json({ error: 'Error al encriptar la contrase√±a' });
    }
};

// **Inicio de sesi√≥n (Administradores)**
// **Inicio de sesi√≥n (Administradores)**
exports.login = (req, res) => {
    const { correo, contrasena } = req.body;

    console.log('‚û°Ô∏è Intentando login con:', correo);

    db.query('SELECT * FROM usuarios_admin WHERE correo = ?', [correo], async (err, results) => {
        if (err) {
            console.error('Error en la consulta SQL:', err);
            return res.status(500).json({ error: 'Error en la base de datos' });
        }

        if (results.length === 0) {
            console.error('Usuario no encontrado');
            return res.status(401).json({ error: 'Credenciales inv√°lidas' });
        }

        try {
            const isValidPassword = await bcrypt.compare(contrasena, results[0].contrasena);
            console.log('üîê Contrase√±a v√°lida:', isValidPassword);
            if (!isValidPassword) {
                return res.status(401).json({ error: 'Credenciales inv√°lidas' });
            }

            const usuario = {
                id: results[0].id,
                nombre: results[0].nombre,
                apellido_paterno: results[0].apellido_paterno,
                apellido_materno: results[0].apellido_materno,
                correo: results[0].correo,
                rol: results[0].rol,
                temporal: results[0].temporal,
            };

            // Verificar si la contrase√±a es temporal
            if (usuario.temporal === 1) {
                return res.status(401).json({ error: 'Has iniciado sesi√≥n con una contrase√±a temporal. Por favor, c√°mbiala.' });
            }

            const token = jwt.sign(
                { id: usuario.id, correo: usuario.correo, rol: usuario.rol },
                'secreto',
                { expiresIn: '1h' }
            );
            console.log('üîë Token generado:', token);

            res.json({ token, usuario });
        } catch (err) {
            console.error('Error al comparar contrase√±as:', err);
            res.status(500).json({ error: 'Error al verificar la contrase√±a' });
        }
    });
};


// **Actualizar contrase√±a**
exports.actualizarPassword = async (req, res) => {
    const { id, nuevaContrasena } = req.body;

    try {
        const hashedPassword = await bcrypt.hash(nuevaContrasena, 10);
        db.query('UPDATE usuarios_admin SET contrasena = ?, temporal = 0 WHERE id = ?', [hashedPassword, id], (err) => {
            if (err) {
                console.error('‚ùå Error al actualizar la contrase√±a:', err);
                return res.status(500).json({ error: 'Error al actualizar la contrase√±a' });
            }
            res.json({ message: 'Contrase√±a actualizada correctamente' });
        });
    } catch (err) {
        console.error('‚ùå Error al encriptar la nueva contrase√±a:', err);
        res.status(500).json({ error: 'Error al encriptar la nueva contrase√±a' });
    }
};

// **Recuperaci√≥n de contrase√±a**
exports.forgotPassword = async (req, res) => {
    const { correo } = req.body;
    console.log('üîÑ Solicitud de recuperaci√≥n de contrase√±a para:', correo);

    db.query('SELECT * FROM usuarios_admin WHERE correo = ?', [correo], async (err, results) => {
        if (err || results.length === 0) {
            console.error('‚ùå Usuario no encontrado o error en la consulta:', err);
            return res.status(404).json({ success: false, message: 'Usuario no encontrado' });
        }

        try {
            const nuevaContrasena = Math.random().toString(36).slice(-8);
            const hashedPassword = await bcrypt.hash(nuevaContrasena, 10);

            db.query('UPDATE usuarios_admin SET contrasena = ?, temporal = 1 WHERE correo = ?', [hashedPassword, correo], async (updateErr) => {
                if (updateErr) {
                    console.error('‚ùå Error al guardar la contrase√±a temporal:', updateErr);
                    return res.status(500).json({ success: false, message: 'Error al guardar la contrase√±a temporal' });
                }

                const transporter = nodemailer.createTransport({
                    service: 'gmail',
                    auth: {
                        user: 'carlos.andres.loaiza52@gmail.com',
                        pass: 'yieh yccp ygwq kpvc', // ‚úÖ Usa token seguro
                    },
                });

                const mailOptions = {
                    from: 'carlos.andres.loaiza52@gmail.com',
                    to: correo,
                    subject: 'Contrase√±a temporal',
                    text: `Tu nueva contrase√±a temporal es: ${nuevaContrasena}\nPor seguridad, c√°mbiala al iniciar sesi√≥n.`,
                };

                try {
                    await transporter.sendMail(mailOptions);
                    res.json({ success: true, message: 'Contrase√±a enviada por correo' });
                } catch (mailError) {
                    console.error('‚ùå Error al enviar el correo:', mailError);
                    res.status(500).json({ success: false, message: 'No se pudo enviar el correo' });
                }
            });
        } catch (err) {
            console.error('‚ùå Error al generar la nueva contrase√±a:', err);
            res.status(500).json({ success: false, message: 'Error al generar la nueva contrase√±a' });
        }
    });
};
